{"version":3,"sources":["components/Color.js","components/Header.js","App.js","serviceWorker.js","index.js"],"names":["ColorWall","color","this","props","handleColorChange","react_default","a","createElement","lib_default","defaultColor","onChange","handleChange","bind","React","Component","Header","className","App","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","onFirstColorChange","setState","firstColor","onSecondColorChange","secondColor","state","alpha","newColor","mix","src_components_Header","style","background","components_Color","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"oOAqBeA,+LAfEC,GACTC,KAAKC,MAAMC,kBAAkBH,oCAI7B,OACII,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAACC,EAAAF,EAAD,CACIG,aAAa,OACbC,SAAUR,KAAKS,aAAaC,KAAKV,gBAV7BW,IAAMC,YCQfC,2LARP,OACIV,EAAAC,EAAAC,cAAA,OAAKS,UAAU,UACXX,EAAAC,EAAAC,cAAA,OAAKS,UAAU,iBAJVH,IAAMC,6BCoCZG,cAhCX,SAAAA,EAAYd,GAAO,IAAAe,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAjB,KAAAe,IACfC,EAAAC,OAAAE,EAAA,EAAAF,CAAAjB,KAAAiB,OAAAG,EAAA,EAAAH,CAAAF,GAAAM,KAAArB,KAAMC,KAOVqB,mBAAqB,SAAAvB,GACjBiB,EAAKO,SAAS,CAACC,WAAYzB,KATZiB,EAYnBS,oBAAsB,SAAA1B,GAClBiB,EAAKO,SAAS,CAACG,YAAa3B,KAX5BiB,EAAKW,MAAQ,CACTH,WAAY,CAACzB,MAAO,OAAQ6B,MAAO,KACnCF,YAAa,CAAC3B,MAAO,OAAQ6B,MAAO,MAJzBZ,wEAiBf,IAAIQ,EAAazB,IAAMC,KAAK2B,MAAMH,WAAWzB,OAAO6B,MAAM5B,KAAK2B,MAAMH,WAAWI,OAC5EF,EAAc3B,IAAMC,KAAK2B,MAAMD,YAAY3B,OAAO6B,MAAM5B,KAAK2B,MAAMD,YAAYE,OAC/EC,EAAWL,EAAWM,IAAIJ,GAC9B,OACIvB,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAC0B,EAAD,MACA5B,EAAAC,EAAAC,cAAA,OAAK2B,MAAO,CAACC,WAAYJ,GAAWf,UAAU,cAC1CX,EAAAC,EAAAC,cAAC6B,EAAD,CAAWhC,kBAAmBF,KAAKsB,qBACnCnB,EAAAC,EAAAC,cAAC6B,EAAD,CAAWhC,kBAAmBF,KAAKyB,+BA3BrCb,aCOEuB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOtC,EAAAC,EAAAC,cAACqC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.ebf83323.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Color.scss'\r\nimport ColorPicker from 'rc-color-picker';\r\nimport 'rc-color-picker/assets/index.css';\r\n\r\nclass ColorWall extends React.Component {\r\n    handleChange(color) {\r\n        this.props.handleColorChange(color);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <ColorPicker\r\n                    defaultColor='#fff'\r\n                    onChange={this.handleChange.bind(this)}/>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ColorWall;","import React from 'react';\r\nimport './Header.scss';\r\n\r\nclass Header extends React.Component {\r\n    render() {\r\n        return (\r\n            <div className='header'>\r\n                <div className='logo'></div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Header;","import React, {Component} from 'react';\nimport ColorWall from './components/Color';\nimport Header from './components/Header';\nimport color from 'color';\n\nclass App extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            firstColor: {color: '#fff', alpha: 100},\n            secondColor: {color: '#fff', alpha: 100}\n        }\n    }\n\n    onFirstColorChange = color => {\n        this.setState({firstColor: color})\n    };\n\n    onSecondColorChange = color => {\n        this.setState({secondColor: color});\n    };\n\n    render() {\n        let firstColor = color(this.state.firstColor.color).alpha(this.state.firstColor.alpha);\n        let secondColor = color(this.state.secondColor.color).alpha(this.state.secondColor.alpha);\n        let newColor = firstColor.mix(secondColor);\n        return (\n            <div>\n                <Header/>\n                <div style={{background: newColor}} className='background'>\n                    <ColorWall handleColorChange={this.onFirstColorChange}/>\n                    <ColorWall handleColorChange={this.onSecondColorChange}/>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}